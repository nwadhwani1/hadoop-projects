/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package p1;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7987766081515192093L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"p1\",\"fields\":[{\"name\":\"studentId\",\"type\":\"int\"},{\"name\":\"subjectName\",\"type\":\"string\"},{\"name\":\"studentMarks\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Student> ENCODER =
      new BinaryMessageEncoder<Student>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Student> DECODER =
      new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Student> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Student> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Student to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Student from a ByteBuffer. */
  public static Student fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int studentId;
  @Deprecated public java.lang.CharSequence subjectName;
  @Deprecated public float studentMarks;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Student() {}

  /**
   * All-args constructor.
   * @param studentId The new value for studentId
   * @param subjectName The new value for subjectName
   * @param studentMarks The new value for studentMarks
   */
  public Student(java.lang.Integer studentId, java.lang.CharSequence subjectName, java.lang.Float studentMarks) {
    this.studentId = studentId;
    this.subjectName = subjectName;
    this.studentMarks = studentMarks;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studentId;
    case 1: return subjectName;
    case 2: return studentMarks;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studentId = (java.lang.Integer)value$; break;
    case 1: subjectName = (java.lang.CharSequence)value$; break;
    case 2: studentMarks = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'studentId' field.
   * @return The value of the 'studentId' field.
   */
  public java.lang.Integer getStudentId() {
    return studentId;
  }

  /**
   * Sets the value of the 'studentId' field.
   * @param value the value to set.
   */
  public void setStudentId(java.lang.Integer value) {
    this.studentId = value;
  }

  /**
   * Gets the value of the 'subjectName' field.
   * @return The value of the 'subjectName' field.
   */
  public java.lang.CharSequence getSubjectName() {
    return subjectName;
  }

  /**
   * Sets the value of the 'subjectName' field.
   * @param value the value to set.
   */
  public void setSubjectName(java.lang.CharSequence value) {
    this.subjectName = value;
  }

  /**
   * Gets the value of the 'studentMarks' field.
   * @return The value of the 'studentMarks' field.
   */
  public java.lang.Float getStudentMarks() {
    return studentMarks;
  }

  /**
   * Sets the value of the 'studentMarks' field.
   * @param value the value to set.
   */
  public void setStudentMarks(java.lang.Float value) {
    this.studentMarks = value;
  }

  /**
   * Creates a new Student RecordBuilder.
   * @return A new Student RecordBuilder
   */
  public static p1.Student.Builder newBuilder() {
    return new p1.Student.Builder();
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Student RecordBuilder
   */
  public static p1.Student.Builder newBuilder(p1.Student.Builder other) {
    return new p1.Student.Builder(other);
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Student instance.
   * @param other The existing instance to copy.
   * @return A new Student RecordBuilder
   */
  public static p1.Student.Builder newBuilder(p1.Student other) {
    return new p1.Student.Builder(other);
  }

  /**
   * RecordBuilder for Student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private int studentId;
    private java.lang.CharSequence subjectName;
    private float studentMarks;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(p1.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subjectName)) {
        this.subjectName = data().deepCopy(fields()[1].schema(), other.subjectName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.studentMarks)) {
        this.studentMarks = data().deepCopy(fields()[2].schema(), other.studentMarks);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Student instance
     * @param other The existing instance to copy.
     */
    private Builder(p1.Student other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.studentId)) {
        this.studentId = data().deepCopy(fields()[0].schema(), other.studentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subjectName)) {
        this.subjectName = data().deepCopy(fields()[1].schema(), other.subjectName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.studentMarks)) {
        this.studentMarks = data().deepCopy(fields()[2].schema(), other.studentMarks);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'studentId' field.
      * @return The value.
      */
    public java.lang.Integer getStudentId() {
      return studentId;
    }

    /**
      * Sets the value of the 'studentId' field.
      * @param value The value of 'studentId'.
      * @return This builder.
      */
    public p1.Student.Builder setStudentId(int value) {
      validate(fields()[0], value);
      this.studentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'studentId' field has been set.
      * @return True if the 'studentId' field has been set, false otherwise.
      */
    public boolean hasStudentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'studentId' field.
      * @return This builder.
      */
    public p1.Student.Builder clearStudentId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subjectName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubjectName() {
      return subjectName;
    }

    /**
      * Sets the value of the 'subjectName' field.
      * @param value The value of 'subjectName'.
      * @return This builder.
      */
    public p1.Student.Builder setSubjectName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.subjectName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subjectName' field has been set.
      * @return True if the 'subjectName' field has been set, false otherwise.
      */
    public boolean hasSubjectName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subjectName' field.
      * @return This builder.
      */
    public p1.Student.Builder clearSubjectName() {
      subjectName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'studentMarks' field.
      * @return The value.
      */
    public java.lang.Float getStudentMarks() {
      return studentMarks;
    }

    /**
      * Sets the value of the 'studentMarks' field.
      * @param value The value of 'studentMarks'.
      * @return This builder.
      */
    public p1.Student.Builder setStudentMarks(float value) {
      validate(fields()[2], value);
      this.studentMarks = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'studentMarks' field has been set.
      * @return True if the 'studentMarks' field has been set, false otherwise.
      */
    public boolean hasStudentMarks() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'studentMarks' field.
      * @return This builder.
      */
    public p1.Student.Builder clearStudentMarks() {
      fieldSetFlags()[2] = false;
      return this;
    }

    //@Override
    @SuppressWarnings("unchecked")
    public Student build() {
      try {
        Student record = new Student();
        record.studentId = fieldSetFlags()[0] ? this.studentId : (java.lang.Integer) defaultValue(fields()[0]);
        record.subjectName = fieldSetFlags()[1] ? this.subjectName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.studentMarks = fieldSetFlags()[2] ? this.studentMarks : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Student>
    WRITER$ = (org.apache.avro.io.DatumWriter<Student>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Student>
    READER$ = (org.apache.avro.io.DatumReader<Student>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
